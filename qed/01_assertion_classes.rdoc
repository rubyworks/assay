= Assertion Classes

  require 'assay'

== EqualityAssay

  assert EqualityAssay.pass?(1,1)
  refute EqualityAssay.pass?(1,2)

== TrueAssay

  assert TrueAssay.pass?(true)
  refute TrueAssay.pass?(false)

== FalseAssay

  assert FalseAssay.pass?(false)
  refute FalseAssay.pass?(true)

== NilAssay

  assert NilAssay.pass?(nil)
  refute NilAssay.pass?(true)
  refute NilAssay.pass?(false)

== WithinAssay

  assert WithinAssay.pass?(1, 1.5, 2)
  refute WithinAssay.pass?(1, 2.5, 1)

== MatchAssay

  assert MatchAssay.pass?(/a/, "abc")
  refute MatchAssay.pass?(/x/, "abc")

== SameAssay

  assert SameAssay.pass?(1, 1)
  refute SameAssay.pass?(1, 1.0)

== IdentityAssay

  assert IdentityAssay.pass?(:a, :a)
  refute IdentityAssay.pass?("a", "a")

== IncludeAssay

  assert IncludeAssay.pass?([1,2,3], 2)
  refute IncludeAssay.pass?([1,2,3], 4)

== InstanceAssay

  assert InstanceAssay.pass?(1, Fixnum)
  refute InstanceAssay.pass?(1, String)

== KindAssay

  assert KindAssay.pass?(1, Integer)
  refute KindAssay.pass?(1, String)

== LikeAssay

  assert LikeAssay.pass?(1, 1)
  assert LikeAssay.pass?(1, 1.0)
  assert LikeAssay.pass?("1", /\d/)

  refute LikeAssay.pass?(1, "1")
  refute LikeAssay.pass?("1", /\D/)

  assert LikeAssay.fail?(1, "1")
  assert LikeAssay.fail?("1", /\D/)

== RaiseAssay

  assert RaiseAssay.pass?(ArgumentError){ raise ArgumentError }
  refute RaiseAssay.pass?(ArgumentError){ raise TypeError }

  assert RaiseAssay.fail?(ArgumentError){ raise TypeError }
  refute RaiseAssay.fail?(ArgumentError){ raise ArgumentError }

== ResponseAssay

  assert ResponseAssay.pass?("string", :upcase)
  refute ResponseAssay.pass?("string", :not_a_method)

== ExecutionAssay

  assert ExecutionAssay.pass?(){ true }
  refute ExecutionAssay.pass?(){ nil }
  refute ExecutionAssay.pass?(){ false }
  refute ExecutionAssay.pass?(){ raise }

  refute ExecutionAssay.fail?(){ true }
  assert ExecutionAssay.fail?(){ nil }
  assert ExecutionAssay.fail?(){ false }
  assert ExecutionAssay.fail?(){ raise }

== ThrowAssay

  assert ThrowAssay.pass?(:foo){ throw :foo }
  refute ThrowAssay.pass?(:foo){ throw :bar }

