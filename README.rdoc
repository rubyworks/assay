= Assay

{Homepage}[http://rubyworks.github.com/assay] /
{Source Code}[http://github.com/rubyworks/assay] /
{MailingList}[http://groups.google.com/group/rubyworks-mailinglist]


== DESCRIPTION

Assay defines assertions in the same way that Ruby defines
exceptions. An assertion then is nothing more that an
extended Exception class. Assay provides a complete set
of these assertion classes for the most common assertion types.
It also provides both TestUnit-style assertion methods and
RSpec-compatiable matchers built from these assertion classes
for use in your preferred test harness. Assay is compatible with
TestUnit, MiniTest, RSpec and other test frameworks.


== FEATURES

* Mirrors the Ruby Exception system.
* Supports a variety of assertion grammers.
* Assertions get their own specialized error messages.


== USAGE

=== Assay Classes

Assay consists of a set of Assertion subclasses known as *assays*. They
are akin to Ruby's Exception subclasses, indeed the +Assertion+ base class
is a subclass of Exception. But assays have special class methods that are
used to make assertions.

Consider the +EqualityAssay+ class. It defines methods for asserting equality
via the `#==` method.

  EqualityAssay.pass!(1,1)

Or equivalently,

  EqualityAssay.assert(1,1)

Additionally, we can check the assertion's test without actually raising the
assertion if it fails using the query method.

  EqualityAssay.pass?(1,1)  #=> true

Assays also provide the opposite method `#fail!` and alias `#refute`.

  EqualityAssay.fail!(1,2)

Finally, assay's can produce matchers using the `#to_matcher` method, or more
conveniently using `#[]`.

  EqualityAssay[1] =~ 1

Notice in the example we have used `#=~` to apply the matcher which makes
the `#pass!` call to the Assay class. Likewise `#!~` can be used to
call `#fail!` instead. Also note that `#===` is an alias for `#=~`.

  EqualityAssay[1] === 1

This means assay matchers can be used in case statments.

  case 10
  when InstanceAssay[Fixnum]
  when EqualityAssay[10.0]
  end

=== Framework Adapters

Assay follows a standard practice of defining assertion error classes with
an `#assertion?` method that returns +true+. This can be used by any test 
framework to easily detect when a raise error is an assertion rather than
an ordinary error. To add support for this to common frameworks Assay
provides adapters.

For example, to use assay with MiniTest framework add to your test help
script:

  require 'assay/adapter/minitest'

Likewise for TestUnit.

  require 'assay/adapter/testunit'

An RSpec adadpter is in the works, and should be out with the next release.

Note that even without the adapter, you can use Assay with other these test
frameworks. They will count Assay's assertions in with errors.

=== Grammers

Of course, the classes are interesting and make an obviously sound 
foundation, but in the end we want to write assertions easily and
concisely. To this, Assay comes with a flexible grammer system which
can be used by requiring any of the prime grammer methods that extend
BasicObject. The most common is probably `should`.

  require 'assay/grammer/should'

  10.should.be.kind_of(Integer)

But is you are acustom to MiniTest's spec methods, you might prefer `must`.

  require 'assay/grammer/must'

  10.must.be.kind_of(Integer)

Assay also provides `assert` for techy aficionados like yours truly.

  require 'assay/grammer/assert'

  10.assert.kind_of(Integer)

=== Custom Grammers

Although Assay ships with built-in grammers, there is no reason not to build
your own grammer built on top of on Assay's classes. Indeed, feel free to do so!
That, after all, is the main purpose of having such a set of reusable assertion
classes! In fact, should it prove common enough, we might spin-off the grammers
as separate projects, leaving Assay to be essentially a dependecny for other
assertion nomenclature libraries.

=== Compatibility Gems

Thre are a few spin-off projects that provide compatability modes for legacy
test frameworks which can server as a transitions to Assay from these other
frameworks. Follow the links below for each:

* {TestUnit}[http://github.com/rubyworks/assay-testunit]
* {MiniTest}[http://github.com/rubyworks/assay-minitest]
* {RSpec}[http://github.com/rubyworks/assay-rspec]

Usage of essentially the same for any one of them. For example,

  require 'assay-rspec'

  include Assay::Matchers

  10.should be_kind_of(Integer)

Note that the compatibility modules are not yet 100% compatable, lacking some
of the more esoteric and complex features. But they are very nearly so, and
should become more so in time.

=== Learn More

There's plently more learn about Assay, mainly the variety of assay classes
available, but also other bits of functionality not comvered here. To learn
about these check out the {QED documentation}[http://github.com/rubyworks/assay],
as well as the {API documentation}[http://rubydoc.info/gems/asasy].


== INSTALLATION

To install with RubyGems simply open a console and type:

  $ gem install assay

Site installation with the tarball can be done with Ruby Setup
(gem install setup). See http://rubyworks.github.com/setup.


== COPYRIGHTS

Copyright (c) 2009 Rubyworks

This program is ditributed under the terms of the *BSD-2-Cluase* license.

See LICENSE.rdoc file for details.

