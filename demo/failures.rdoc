= Failure Classes

  require 'assay'

== EqualityFailure

  assert Assay::EqualityFailure.check(1,1)
  refute Assay::EqualityFailure.check(1,2)

== TrueFailure

  assert Assay::TrueFailure.check(true)
  refute Assay::TrueFailure.check(false)

== FalseFailure

  assert Assay::FalseFailure.check(false)
  refute Assay::FalseFailure.check(true)

== NilFailure

  assert Assay::NilFailure.check(nil)
  refute Assay::NilFailure.check(true)
  refute Assay::NilFailure.check(false)

== DeltaFailure

  assert Assay::DeltaFailure.check(1, 1.5, 2)
  refute Assay::DeltaFailure.check(1, 2.5, 1)

== MatchFailure

  assert Assay::MatchFailure.check(/a/, "abc")
  refute Assay::MatchFailure.check(/x/, "abc")

== SameFailure

  assert Assay::SameFailure.check(1, 1)
  refute Assay::SameFailure.check(1, 1.0)

== IdentityFailure

  assert Assay::IdentityFailure.check(:a, :a)
  refute Assay::IdentityFailure.check("a", "a")

== InstanceFailure

  assert Assay::InstanceFailure.check(1, Fixnum)
  refute Assay::InstanceFailure.check(1, String)

== KindFailure

  assert Assay::KindFailure.check(1, Integer)
  refute Assay::KindFailure.check(1, String)

== ReturnFailure

  assert Assay::ReturnFailure.check(1){ 1 }
  refute Assay::ReturnFailure.check(1){ 2 }

== RaiseFailure

  assert Assay::RaiseFailure.check(ArgumentError){ raise ArgumentError }
  refute Assay::RaiseFailure.check(ArgumentError){ raise TypeError }

== ResponseFailure

  assert Assay::ResponseFailure.check("string", :upcase)
  refute Assay::ResponseFailure.check("string", :not_a_method)

== ExecutionFailure

  assert Assay::ExecutionFailure.check(){ nil }
  refute Assay::ExecutionFailure.check(){ raise }

== ThrowFailure

  assert Assay::ThrowFailure.check(:foo){ throw :foo }
  refute Assay::ThrowFailure.check(:foo){ throw :bar }

