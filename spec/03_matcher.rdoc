# Assay as Matcher

Assay classes are *matchers*. They can be initialized with criteria
and applied to target objects.

## Standard Target Matching

    matcher = EqualAssay[1]

    matcher.assert!(1)

## Partial Arguments

    matcher = LessAssay[1,__]

We can apply the matcher using the `#pass!` method.

    matcher.assert!(2)

Likewise we can assert the negated expression using `#fail!`.

    matcher.refute!(0)

Assay partial a very versile because they allow any argument to become
the target of a matcher.

    matcher = CompareAssay[2,1,__]

    matcher.assert!(1)
    matcher.refute!(0)

## Match Method

The `#=~` method is an alias for `#assert!`.

    matcher = EqualAssay[1]

    matcher =~ 1

Conversely, `#!~` method is an alias for `#refute!`.

    matcher !~ 2

## Case Method

The `#===` method is also an alias for `#assert!`.

    matcher === 1

This allows the `case` statement to be used in an intersting way.

    case 10
    when KindAssay[Numeric]
    when EqualAssay[10.0]
    end

## Negated Matchers

Matchers can be negated so that pass and fail methods swap behaviors.

    matcher = EqualityAssay[__,1]

    matcher.negated === 2

For conveience we can also negate the matcher using the `~` unary operator.

    ~matcher === 2

